"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ScaleOnCpuUtilization = void 0;
const cdk = require("@aws-cdk/core");
const extension_interfaces_1 = require("./extension-interfaces");
// The default autoscaling settings
const cpuScalingPropsDefault = {
    initialTaskCount: 2,
    minTaskCount: 2,
    maxTaskCount: 8,
    targetCpuUtilization: 50,
    scaleOutCooldown: cdk.Duration.seconds(60),
    scaleInCooldown: cdk.Duration.seconds(60),
};
/**
 * This extension helps you scale your service according to CPU utilization.
 *
 * @deprecated To enable target tracking based on CPU utilization, use the `targetCpuUtilization` property of `autoScaleTaskCount` in the `Service` construct.
 * For more information, please refer https://github.com/aws/aws-cdk/blob/main/packages/%40aws-cdk-containers/ecs-service-extensions/README.md#task-auto-scaling .
 */
class ScaleOnCpuUtilization extends extension_interfaces_1.ServiceExtension {
    constructor(props) {
        super('scale-on-cpu-utilization');
        let combinedProps = {
            ...cpuScalingPropsDefault,
            ...props,
        };
        this.initialTaskCount = combinedProps.initialTaskCount;
        this.minTaskCount = combinedProps.minTaskCount;
        this.maxTaskCount = combinedProps.maxTaskCount;
        this.targetCpuUtilization = combinedProps.targetCpuUtilization;
        this.scaleOutCooldown = combinedProps.scaleOutCooldown;
        this.scaleInCooldown = combinedProps.scaleInCooldown;
    }
    // This service modifies properties of the service prior
    // to construct creation.
    modifyServiceProps(props) {
        return {
            ...props,
            // Launch an initial number of tasks
            // In the future we should change this to use a custom resource
            // to read the current task count set by autoscaling, so that the task
            // count doesn't rollback to the initial level on each deploy.
            desiredCount: this.initialTaskCount,
        };
    }
    // This hook utilizes the resulting service construct
    // once it is created.
    useService(service) {
        if (this.parentService.scalableTaskCount) {
            throw Error('Cannot specify \'autoScaleTaskCount\' in the Service construct and also provide a  \'ScaleOnCpuUtilization\' extension. \'ScaleOnCpuUtilization\' is deprecated. Please only provide \'autoScaleTaskCount\'.');
        }
        const scalingTarget = service.autoScaleTaskCount({
            minCapacity: this.minTaskCount,
            maxCapacity: this.maxTaskCount,
        });
        scalingTarget.scaleOnCpuUtilization(`${this.parentService.id}-target-cpu-utilization-${this.targetCpuUtilization}`, {
            targetUtilizationPercent: this.targetCpuUtilization,
            scaleInCooldown: this.scaleInCooldown,
            scaleOutCooldown: this.scaleOutCooldown,
        });
        this.parentService.enableAutoScalingPolicy();
    }
}
exports.ScaleOnCpuUtilization = ScaleOnCpuUtilization;
//# sourceMappingURL=data:application/json;base64,