"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.InjecterExtension = exports.InjectableTopic = void 0;
const extension_interfaces_1 = require("./extension-interfaces");
/**
 * The `InjectableTopic` class represents SNS Topic resource that can be published events to by the parent service.
 */
class InjectableTopic {
    constructor(props) {
        this.topic = props.topic;
    }
    grant(taskDefinition) {
        this.topic.grantPublish(taskDefinition.taskRole);
    }
    environmentVariables() {
        let environment = {};
        environment[`${this.topic.node.id.toUpperCase()}_TOPIC_ARN`] = this.topic.topicArn;
        return environment;
    }
}
exports.InjectableTopic = InjectableTopic;
/**
 * This hook modifies the application container's environment to
 * add the injectable resource environment variables.
 */
class InjecterExtensionMutatingHook extends extension_interfaces_1.ContainerMutatingHook {
    constructor(props) {
        super();
        this.environment = props.environment;
    }
    mutateContainerDefinition(props) {
        return {
            ...props,
            environment: { ...(props.environment || {}), ...this.environment },
        };
    }
}
/**
 * This extension accepts a list of `Injectable` resources that the parent service can publish events or write data to.
 * It sets up the corresponding permissions for the task role of the parent service.
 */
class InjecterExtension extends extension_interfaces_1.ServiceExtension {
    constructor(props) {
        super('injecter');
        this.environment = {};
        this.props = props;
    }
    // @ts-ignore - Ignore unused params that are required for abstract class extend
    prehook(service, scope) {
        this.parentService = service;
        for (const injectable of this.props.injectables) {
            for (const [key, val] of Object.entries(injectable.environmentVariables())) {
                this.environment[key] = val;
            }
        }
    }
    /**
     * Add hooks to the main application extension so that it is modified to
     * add the injectable resource environment variables to the container environment.
     */
    addHooks() {
        const container = this.parentService.serviceDescription.get('service-container');
        if (!container) {
            throw new Error('Injecter Extension requires an application extension');
        }
        container.addContainerMutatingHook(new InjecterExtensionMutatingHook({
            environment: this.environment,
        }));
    }
    /**
     * After the task definition has been created, this hook grants the required permissions to the task role for the
     * parent service.
     *
     * @param taskDefinition The created task definition
     */
    useTaskDefinition(taskDefinition) {
        for (const injectable of this.props.injectables) {
            if (injectable.grant !== undefined) {
                injectable.grant(taskDefinition);
            }
        }
    }
}
exports.InjecterExtension = InjecterExtension;
//# sourceMappingURL=data:application/json;base64,