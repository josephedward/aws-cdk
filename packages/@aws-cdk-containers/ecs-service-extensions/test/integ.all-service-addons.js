"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const aws_appmesh_1 = require("@aws-cdk/aws-appmesh");
const aws_ecs_1 = require("@aws-cdk/aws-ecs");
const core_1 = require("@aws-cdk/core");
const lib_1 = require("../lib");
const app = new core_1.App();
const stack = new core_1.Stack(app, 'aws-ecs-integ');
const mesh = new aws_appmesh_1.Mesh(stack, 'my-mesh');
const environment = new lib_1.Environment(stack, 'production');
/** Name service */
const nameDescription = new lib_1.ServiceDescription();
nameDescription.add(new lib_1.Container({
    cpu: 1024,
    memoryMiB: 2048,
    trafficPort: 80,
    image: aws_ecs_1.ContainerImage.fromRegistry('nathanpeck/name'),
    environment: {
        PORT: '80',
    },
}));
nameDescription.add(new lib_1.AppMeshExtension({ mesh }));
nameDescription.add(new lib_1.FireLensExtension());
nameDescription.add(new lib_1.XRayExtension());
nameDescription.add(new lib_1.CloudwatchAgentExtension());
nameDescription.add(new lib_1.ScaleOnCpuUtilization({
    initialTaskCount: 2,
    minTaskCount: 2,
}));
const nameService = new lib_1.Service(stack, 'name', {
    environment: environment,
    serviceDescription: nameDescription,
});
/** Greeting service */
const greetingDescription = new lib_1.ServiceDescription();
greetingDescription.add(new lib_1.Container({
    cpu: 1024,
    memoryMiB: 2048,
    trafficPort: 80,
    image: aws_ecs_1.ContainerImage.fromRegistry('nathanpeck/greeting'),
    environment: {
        PORT: '80',
    },
}));
greetingDescription.add(new lib_1.AppMeshExtension({ mesh }));
greetingDescription.add(new lib_1.FireLensExtension());
greetingDescription.add(new lib_1.XRayExtension());
greetingDescription.add(new lib_1.CloudwatchAgentExtension());
greetingDescription.add(new lib_1.ScaleOnCpuUtilization({
    initialTaskCount: 2,
    minTaskCount: 2,
}));
const greetingService = new lib_1.Service(stack, 'greeting', {
    environment: environment,
    serviceDescription: greetingDescription,
});
/** Greeter service */
const greeterDescription = new lib_1.ServiceDescription();
greeterDescription.add(new lib_1.Container({
    cpu: 1024,
    memoryMiB: 2048,
    trafficPort: 80,
    image: aws_ecs_1.ContainerImage.fromRegistry('nathanpeck/greeter'),
    environment: {
        PORT: '80',
        GREETING_URL: 'http://greeting.production',
        NAME_URL: 'http://name.production',
    },
}));
greeterDescription.add(new lib_1.AppMeshExtension({ mesh }));
greeterDescription.add(new lib_1.FireLensExtension());
greeterDescription.add(new lib_1.XRayExtension());
greeterDescription.add(new lib_1.CloudwatchAgentExtension());
greeterDescription.add(new lib_1.HttpLoadBalancerExtension());
greeterDescription.add(new lib_1.ScaleOnCpuUtilization({
    initialTaskCount: 2,
    minTaskCount: 2,
}));
const greeterService = new lib_1.Service(stack, 'greeter', {
    environment: environment,
    serviceDescription: greeterDescription,
});
greeterService.connectTo(nameService);
greeterService.connectTo(greetingService);
/**
 * Expectations are that you should see an output
 * of the load balancer URL for the greeter service, make
 * a request to it and see a greeting phrase constructed out
 * of a random greeting and a random name from the two underlying
 * services. The other addons enable tracing and logging which must
 * be verified separately.
 */ 
//# sourceMappingURL=data:application/json;base64,