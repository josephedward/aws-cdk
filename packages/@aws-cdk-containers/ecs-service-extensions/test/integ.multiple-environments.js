"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const aws_appmesh_1 = require("@aws-cdk/aws-appmesh");
const ecs = require("@aws-cdk/aws-ecs");
const cdk = require("@aws-cdk/core");
const lib_1 = require("../lib");
const app = new cdk.App();
const stack = new cdk.Stack(app, 'aws-ecs-integ');
const production = new lib_1.Environment(stack, 'production');
const development = new lib_1.Environment(stack, 'development');
const productionMesh = new aws_appmesh_1.Mesh(stack, 'production-mesh');
const developmentMesh = new aws_appmesh_1.Mesh(stack, 'development-mesh');
/** Production name service */
const productionNameDescription = new lib_1.ServiceDescription();
productionNameDescription.add(new lib_1.Container({
    cpu: 1024,
    memoryMiB: 2048,
    trafficPort: 80,
    image: ecs.ContainerImage.fromRegistry('nathanpeck/name'),
    environment: {
        PORT: '80',
    },
}));
productionNameDescription.add(new lib_1.AppMeshExtension({ mesh: productionMesh }));
new lib_1.Service(stack, 'name-production', {
    environment: production,
    serviceDescription: productionNameDescription,
});
/** Development name service */
const developmentNameDescription = new lib_1.ServiceDescription();
developmentNameDescription.add(new lib_1.Container({
    cpu: 1024,
    memoryMiB: 2048,
    trafficPort: 80,
    image: ecs.ContainerImage.fromRegistry('nathanpeck/name'),
    environment: {
        PORT: '80',
    },
}));
developmentNameDescription.add(new lib_1.AppMeshExtension({ mesh: developmentMesh }));
new lib_1.Service(stack, 'name-development', {
    environment: development,
    serviceDescription: developmentNameDescription,
});
/**
 * This test verifies the edge case of creating multiple environments
 * on the same account to ensure that there are no conflicts.
 */ 
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW50ZWcubXVsdGlwbGUtZW52aXJvbm1lbnRzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiaW50ZWcubXVsdGlwbGUtZW52aXJvbm1lbnRzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsc0RBQTRDO0FBQzVDLHdDQUF3QztBQUN4QyxxQ0FBcUM7QUFDckMsZ0NBQStGO0FBRS9GLE1BQU0sR0FBRyxHQUFHLElBQUksR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDO0FBQzFCLE1BQU0sS0FBSyxHQUFHLElBQUksR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLEVBQUUsZUFBZSxDQUFDLENBQUM7QUFFbEQsTUFBTSxVQUFVLEdBQUcsSUFBSSxpQkFBVyxDQUFDLEtBQUssRUFBRSxZQUFZLENBQUMsQ0FBQztBQUN4RCxNQUFNLFdBQVcsR0FBRyxJQUFJLGlCQUFXLENBQUMsS0FBSyxFQUFFLGFBQWEsQ0FBQyxDQUFDO0FBRTFELE1BQU0sY0FBYyxHQUFHLElBQUksa0JBQUksQ0FBQyxLQUFLLEVBQUUsaUJBQWlCLENBQUMsQ0FBQztBQUMxRCxNQUFNLGVBQWUsR0FBRyxJQUFJLGtCQUFJLENBQUMsS0FBSyxFQUFFLGtCQUFrQixDQUFDLENBQUM7QUFFNUQsOEJBQThCO0FBQzlCLE1BQU0seUJBQXlCLEdBQUcsSUFBSSx3QkFBa0IsRUFBRSxDQUFDO0FBQzNELHlCQUF5QixDQUFDLEdBQUcsQ0FBQyxJQUFJLGVBQVMsQ0FBQztJQUMxQyxHQUFHLEVBQUUsSUFBSTtJQUNULFNBQVMsRUFBRSxJQUFJO0lBQ2YsV0FBVyxFQUFFLEVBQUU7SUFDZixLQUFLLEVBQUUsR0FBRyxDQUFDLGNBQWMsQ0FBQyxZQUFZLENBQUMsaUJBQWlCLENBQUM7SUFDekQsV0FBVyxFQUFFO1FBQ1gsSUFBSSxFQUFFLElBQUk7S0FDWDtDQUNGLENBQUMsQ0FBQyxDQUFDO0FBQ0oseUJBQXlCLENBQUMsR0FBRyxDQUFDLElBQUksc0JBQWdCLENBQUMsRUFBRSxJQUFJLEVBQUUsY0FBYyxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBRTlFLElBQUksYUFBTyxDQUFDLEtBQUssRUFBRSxpQkFBaUIsRUFBRTtJQUNwQyxXQUFXLEVBQUUsVUFBVTtJQUN2QixrQkFBa0IsRUFBRSx5QkFBeUI7Q0FDOUMsQ0FBQyxDQUFDO0FBRUgsK0JBQStCO0FBQy9CLE1BQU0sMEJBQTBCLEdBQUcsSUFBSSx3QkFBa0IsRUFBRSxDQUFDO0FBQzVELDBCQUEwQixDQUFDLEdBQUcsQ0FBQyxJQUFJLGVBQVMsQ0FBQztJQUMzQyxHQUFHLEVBQUUsSUFBSTtJQUNULFNBQVMsRUFBRSxJQUFJO0lBQ2YsV0FBVyxFQUFFLEVBQUU7SUFDZixLQUFLLEVBQUUsR0FBRyxDQUFDLGNBQWMsQ0FBQyxZQUFZLENBQUMsaUJBQWlCLENBQUM7SUFDekQsV0FBVyxFQUFFO1FBQ1gsSUFBSSxFQUFFLElBQUk7S0FDWDtDQUNGLENBQUMsQ0FBQyxDQUFDO0FBQ0osMEJBQTBCLENBQUMsR0FBRyxDQUFDLElBQUksc0JBQWdCLENBQUMsRUFBRSxJQUFJLEVBQUUsZUFBZSxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBRWhGLElBQUksYUFBTyxDQUFDLEtBQUssRUFBRSxrQkFBa0IsRUFBRTtJQUNyQyxXQUFXLEVBQUUsV0FBVztJQUN4QixrQkFBa0IsRUFBRSwwQkFBMEI7Q0FDL0MsQ0FBQyxDQUFDO0FBRUg7OztHQUdHIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTWVzaCB9IGZyb20gJ0Bhd3MtY2RrL2F3cy1hcHBtZXNoJztcbmltcG9ydCAqIGFzIGVjcyBmcm9tICdAYXdzLWNkay9hd3MtZWNzJztcbmltcG9ydCAqIGFzIGNkayBmcm9tICdAYXdzLWNkay9jb3JlJztcbmltcG9ydCB7IENvbnRhaW5lciwgRW52aXJvbm1lbnQsIFNlcnZpY2UsIFNlcnZpY2VEZXNjcmlwdGlvbiwgQXBwTWVzaEV4dGVuc2lvbiB9IGZyb20gJy4uL2xpYic7XG5cbmNvbnN0IGFwcCA9IG5ldyBjZGsuQXBwKCk7XG5jb25zdCBzdGFjayA9IG5ldyBjZGsuU3RhY2soYXBwLCAnYXdzLWVjcy1pbnRlZycpO1xuXG5jb25zdCBwcm9kdWN0aW9uID0gbmV3IEVudmlyb25tZW50KHN0YWNrLCAncHJvZHVjdGlvbicpO1xuY29uc3QgZGV2ZWxvcG1lbnQgPSBuZXcgRW52aXJvbm1lbnQoc3RhY2ssICdkZXZlbG9wbWVudCcpO1xuXG5jb25zdCBwcm9kdWN0aW9uTWVzaCA9IG5ldyBNZXNoKHN0YWNrLCAncHJvZHVjdGlvbi1tZXNoJyk7XG5jb25zdCBkZXZlbG9wbWVudE1lc2ggPSBuZXcgTWVzaChzdGFjaywgJ2RldmVsb3BtZW50LW1lc2gnKTtcblxuLyoqIFByb2R1Y3Rpb24gbmFtZSBzZXJ2aWNlICovXG5jb25zdCBwcm9kdWN0aW9uTmFtZURlc2NyaXB0aW9uID0gbmV3IFNlcnZpY2VEZXNjcmlwdGlvbigpO1xucHJvZHVjdGlvbk5hbWVEZXNjcmlwdGlvbi5hZGQobmV3IENvbnRhaW5lcih7XG4gIGNwdTogMTAyNCxcbiAgbWVtb3J5TWlCOiAyMDQ4LFxuICB0cmFmZmljUG9ydDogODAsXG4gIGltYWdlOiBlY3MuQ29udGFpbmVySW1hZ2UuZnJvbVJlZ2lzdHJ5KCduYXRoYW5wZWNrL25hbWUnKSxcbiAgZW52aXJvbm1lbnQ6IHtcbiAgICBQT1JUOiAnODAnLFxuICB9LFxufSkpO1xucHJvZHVjdGlvbk5hbWVEZXNjcmlwdGlvbi5hZGQobmV3IEFwcE1lc2hFeHRlbnNpb24oeyBtZXNoOiBwcm9kdWN0aW9uTWVzaCB9KSk7XG5cbm5ldyBTZXJ2aWNlKHN0YWNrLCAnbmFtZS1wcm9kdWN0aW9uJywge1xuICBlbnZpcm9ubWVudDogcHJvZHVjdGlvbixcbiAgc2VydmljZURlc2NyaXB0aW9uOiBwcm9kdWN0aW9uTmFtZURlc2NyaXB0aW9uLFxufSk7XG5cbi8qKiBEZXZlbG9wbWVudCBuYW1lIHNlcnZpY2UgKi9cbmNvbnN0IGRldmVsb3BtZW50TmFtZURlc2NyaXB0aW9uID0gbmV3IFNlcnZpY2VEZXNjcmlwdGlvbigpO1xuZGV2ZWxvcG1lbnROYW1lRGVzY3JpcHRpb24uYWRkKG5ldyBDb250YWluZXIoe1xuICBjcHU6IDEwMjQsXG4gIG1lbW9yeU1pQjogMjA0OCxcbiAgdHJhZmZpY1BvcnQ6IDgwLFxuICBpbWFnZTogZWNzLkNvbnRhaW5lckltYWdlLmZyb21SZWdpc3RyeSgnbmF0aGFucGVjay9uYW1lJyksXG4gIGVudmlyb25tZW50OiB7XG4gICAgUE9SVDogJzgwJyxcbiAgfSxcbn0pKTtcbmRldmVsb3BtZW50TmFtZURlc2NyaXB0aW9uLmFkZChuZXcgQXBwTWVzaEV4dGVuc2lvbih7IG1lc2g6IGRldmVsb3BtZW50TWVzaCB9KSk7XG5cbm5ldyBTZXJ2aWNlKHN0YWNrLCAnbmFtZS1kZXZlbG9wbWVudCcsIHtcbiAgZW52aXJvbm1lbnQ6IGRldmVsb3BtZW50LFxuICBzZXJ2aWNlRGVzY3JpcHRpb246IGRldmVsb3BtZW50TmFtZURlc2NyaXB0aW9uLFxufSk7XG5cbi8qKlxuICogVGhpcyB0ZXN0IHZlcmlmaWVzIHRoZSBlZGdlIGNhc2Ugb2YgY3JlYXRpbmcgbXVsdGlwbGUgZW52aXJvbm1lbnRzXG4gKiBvbiB0aGUgc2FtZSBhY2NvdW50IHRvIGVuc3VyZSB0aGF0IHRoZXJlIGFyZSBubyBjb25mbGljdHMuXG4gKi8iXX0=