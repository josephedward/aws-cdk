"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ecs = require("@aws-cdk/aws-ecs");
const sns = require("@aws-cdk/aws-sns");
const sqs = require("@aws-cdk/aws-sqs");
const cdk = require("@aws-cdk/core");
const lib_1 = require("../lib");
const app = new cdk.App();
const stack = new cdk.Stack(app, 'aws-ecs-integ');
const environment = new lib_1.Environment(stack, 'production');
const pubServiceDescription = new lib_1.ServiceDescription();
pubServiceDescription.add(new lib_1.Container({
    cpu: 256,
    memoryMiB: 512,
    trafficPort: 80,
    image: ecs.ContainerImage.fromRegistry('nathanpeck/name'),
    environment: {
        PORT: '80',
    },
}));
const topic1 = new lib_1.InjectableTopic({
    topic: new sns.Topic(stack, 'sign-up'),
});
const topic2 = new lib_1.InjectableTopic({
    topic: new sns.Topic(stack, 'delete'),
});
pubServiceDescription.add(new lib_1.InjecterExtension({
    injectables: [topic1, topic2],
}));
new lib_1.Service(stack, 'Publisher', {
    environment: environment,
    serviceDescription: pubServiceDescription,
});
const subServiceDescription = new lib_1.ServiceDescription();
subServiceDescription.add(new lib_1.Container({
    cpu: 256,
    memoryMiB: 512,
    trafficPort: 80,
    image: ecs.ContainerImage.fromRegistry('nathanpeck/name'),
    environment: {
        PORT: '80',
    },
}));
const topicSubscription1 = new lib_1.TopicSubscription({
    topic: topic1.topic,
    topicSubscriptionQueue: {
        queue: new sqs.Queue(stack, 'sign-up-queue'),
        scaleOnLatency: {
            acceptableLatency: cdk.Duration.minutes(10),
            messageProcessingTime: cdk.Duration.seconds(20),
        },
    },
});
const topicSubscription2 = new lib_1.TopicSubscription({
    topic: topic2.topic,
});
subServiceDescription.add(new lib_1.QueueExtension({
    subscriptions: [topicSubscription1, topicSubscription2],
    scaleOnLatency: {
        acceptableLatency: cdk.Duration.minutes(5),
        messageProcessingTime: cdk.Duration.seconds(20),
    },
}));
new lib_1.Service(stack, 'Worker', {
    environment: environment,
    serviceDescription: subServiceDescription,
    autoScaleTaskCount: {
        maxTaskCount: 10,
    },
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW50ZWcucHVibGlzaC1zdWJzY3JpYmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbnRlZy5wdWJsaXNoLXN1YnNjcmliZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHdDQUF3QztBQUN4Qyx3Q0FBd0M7QUFDeEMsd0NBQXdDO0FBQ3hDLHFDQUFxQztBQUNyQyxnQ0FBb0o7QUFHcEosTUFBTSxHQUFHLEdBQUcsSUFBSSxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUM7QUFDMUIsTUFBTSxLQUFLLEdBQUcsSUFBSSxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsRUFBRSxlQUFlLENBQUMsQ0FBQztBQUVsRCxNQUFNLFdBQVcsR0FBRyxJQUFJLGlCQUFXLENBQUMsS0FBSyxFQUFFLFlBQVksQ0FBQyxDQUFDO0FBRXpELE1BQU0scUJBQXFCLEdBQUcsSUFBSSx3QkFBa0IsRUFBRSxDQUFDO0FBRXZELHFCQUFxQixDQUFDLEdBQUcsQ0FBQyxJQUFJLGVBQVMsQ0FBQztJQUN0QyxHQUFHLEVBQUUsR0FBRztJQUNSLFNBQVMsRUFBRSxHQUFHO0lBQ2QsV0FBVyxFQUFFLEVBQUU7SUFDZixLQUFLLEVBQUUsR0FBRyxDQUFDLGNBQWMsQ0FBQyxZQUFZLENBQUMsaUJBQWlCLENBQUM7SUFDekQsV0FBVyxFQUFFO1FBQ1gsSUFBSSxFQUFFLElBQUk7S0FDWDtDQUNGLENBQUMsQ0FBQyxDQUFDO0FBRUosTUFBTSxNQUFNLEdBQUcsSUFBSSxxQkFBZSxDQUFDO0lBQ2pDLEtBQUssRUFBRSxJQUFJLEdBQUcsQ0FBQyxLQUFLLENBQUMsS0FBSyxFQUFFLFNBQVMsQ0FBQztDQUN2QyxDQUFDLENBQUM7QUFFSCxNQUFNLE1BQU0sR0FBRyxJQUFJLHFCQUFlLENBQUM7SUFDakMsS0FBSyxFQUFFLElBQUksR0FBRyxDQUFDLEtBQUssQ0FBQyxLQUFLLEVBQUUsUUFBUSxDQUFDO0NBQ3RDLENBQUMsQ0FBQztBQUVILHFCQUFxQixDQUFDLEdBQUcsQ0FBQyxJQUFJLHVCQUFpQixDQUFDO0lBQzlDLFdBQVcsRUFBRSxDQUFDLE1BQU0sRUFBRSxNQUFNLENBQUM7Q0FDOUIsQ0FBQyxDQUFDLENBQUM7QUFFSixJQUFJLGFBQU8sQ0FBQyxLQUFLLEVBQUUsV0FBVyxFQUFFO0lBQzlCLFdBQVcsRUFBRSxXQUFXO0lBQ3hCLGtCQUFrQixFQUFFLHFCQUFxQjtDQUMxQyxDQUFDLENBQUM7QUFFSCxNQUFNLHFCQUFxQixHQUFHLElBQUksd0JBQWtCLEVBQUUsQ0FBQztBQUV2RCxxQkFBcUIsQ0FBQyxHQUFHLENBQUMsSUFBSSxlQUFTLENBQUM7SUFDdEMsR0FBRyxFQUFFLEdBQUc7SUFDUixTQUFTLEVBQUUsR0FBRztJQUNkLFdBQVcsRUFBRSxFQUFFO0lBQ2YsS0FBSyxFQUFFLEdBQUcsQ0FBQyxjQUFjLENBQUMsWUFBWSxDQUFDLGlCQUFpQixDQUFDO0lBQ3pELFdBQVcsRUFBRTtRQUNYLElBQUksRUFBRSxJQUFJO0tBQ1g7Q0FDRixDQUFDLENBQUMsQ0FBQztBQUVKLE1BQU0sa0JBQWtCLEdBQUcsSUFBSSx1QkFBaUIsQ0FBQztJQUMvQyxLQUFLLEVBQUUsTUFBTSxDQUFDLEtBQUs7SUFDbkIsc0JBQXNCLEVBQUU7UUFDdEIsS0FBSyxFQUFFLElBQUksR0FBRyxDQUFDLEtBQUssQ0FBQyxLQUFLLEVBQUUsZUFBZSxDQUFDO1FBQzVDLGNBQWMsRUFBRTtZQUNkLGlCQUFpQixFQUFFLEdBQUcsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQztZQUMzQyxxQkFBcUIsRUFBRSxHQUFHLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUM7U0FDaEQ7S0FDRjtDQUNGLENBQUMsQ0FBQztBQUNILE1BQU0sa0JBQWtCLEdBQUcsSUFBSSx1QkFBaUIsQ0FBQztJQUMvQyxLQUFLLEVBQUUsTUFBTSxDQUFDLEtBQUs7Q0FDcEIsQ0FBQyxDQUFDO0FBRUgscUJBQXFCLENBQUMsR0FBRyxDQUFDLElBQUksb0JBQWMsQ0FBQztJQUMzQyxhQUFhLEVBQUUsQ0FBQyxrQkFBa0IsRUFBRSxrQkFBa0IsQ0FBQztJQUN2RCxjQUFjLEVBQUU7UUFDZCxpQkFBaUIsRUFBRSxHQUFHLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7UUFDMUMscUJBQXFCLEVBQUUsR0FBRyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDO0tBQ2hEO0NBQ0YsQ0FBQyxDQUFDLENBQUM7QUFFSixJQUFJLGFBQU8sQ0FBQyxLQUFLLEVBQUUsUUFBUSxFQUFFO0lBQzNCLFdBQVcsRUFBRSxXQUFXO0lBQ3hCLGtCQUFrQixFQUFFLHFCQUFxQjtJQUN6QyxrQkFBa0IsRUFBRTtRQUNsQixZQUFZLEVBQUUsRUFBRTtLQUNqQjtDQUNGLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGVjcyBmcm9tICdAYXdzLWNkay9hd3MtZWNzJztcbmltcG9ydCAqIGFzIHNucyBmcm9tICdAYXdzLWNkay9hd3Mtc25zJztcbmltcG9ydCAqIGFzIHNxcyBmcm9tICdAYXdzLWNkay9hd3Mtc3FzJztcbmltcG9ydCAqIGFzIGNkayBmcm9tICdAYXdzLWNkay9jb3JlJztcbmltcG9ydCB7IENvbnRhaW5lciwgRW52aXJvbm1lbnQsIEluamVjdGVyRXh0ZW5zaW9uLCBJbmplY3RhYmxlVG9waWMsIFF1ZXVlRXh0ZW5zaW9uLCBTZXJ2aWNlLCBTZXJ2aWNlRGVzY3JpcHRpb24sIFRvcGljU3Vic2NyaXB0aW9uIH0gZnJvbSAnLi4vbGliJztcblxuXG5jb25zdCBhcHAgPSBuZXcgY2RrLkFwcCgpO1xuY29uc3Qgc3RhY2sgPSBuZXcgY2RrLlN0YWNrKGFwcCwgJ2F3cy1lY3MtaW50ZWcnKTtcblxuY29uc3QgZW52aXJvbm1lbnQgPSBuZXcgRW52aXJvbm1lbnQoc3RhY2ssICdwcm9kdWN0aW9uJyk7XG5cbmNvbnN0IHB1YlNlcnZpY2VEZXNjcmlwdGlvbiA9IG5ldyBTZXJ2aWNlRGVzY3JpcHRpb24oKTtcblxucHViU2VydmljZURlc2NyaXB0aW9uLmFkZChuZXcgQ29udGFpbmVyKHtcbiAgY3B1OiAyNTYsXG4gIG1lbW9yeU1pQjogNTEyLFxuICB0cmFmZmljUG9ydDogODAsXG4gIGltYWdlOiBlY3MuQ29udGFpbmVySW1hZ2UuZnJvbVJlZ2lzdHJ5KCduYXRoYW5wZWNrL25hbWUnKSxcbiAgZW52aXJvbm1lbnQ6IHtcbiAgICBQT1JUOiAnODAnLFxuICB9LFxufSkpO1xuXG5jb25zdCB0b3BpYzEgPSBuZXcgSW5qZWN0YWJsZVRvcGljKHtcbiAgdG9waWM6IG5ldyBzbnMuVG9waWMoc3RhY2ssICdzaWduLXVwJyksXG59KTtcblxuY29uc3QgdG9waWMyID0gbmV3IEluamVjdGFibGVUb3BpYyh7XG4gIHRvcGljOiBuZXcgc25zLlRvcGljKHN0YWNrLCAnZGVsZXRlJyksXG59KTtcblxucHViU2VydmljZURlc2NyaXB0aW9uLmFkZChuZXcgSW5qZWN0ZXJFeHRlbnNpb24oe1xuICBpbmplY3RhYmxlczogW3RvcGljMSwgdG9waWMyXSxcbn0pKTtcblxubmV3IFNlcnZpY2Uoc3RhY2ssICdQdWJsaXNoZXInLCB7XG4gIGVudmlyb25tZW50OiBlbnZpcm9ubWVudCxcbiAgc2VydmljZURlc2NyaXB0aW9uOiBwdWJTZXJ2aWNlRGVzY3JpcHRpb24sXG59KTtcblxuY29uc3Qgc3ViU2VydmljZURlc2NyaXB0aW9uID0gbmV3IFNlcnZpY2VEZXNjcmlwdGlvbigpO1xuXG5zdWJTZXJ2aWNlRGVzY3JpcHRpb24uYWRkKG5ldyBDb250YWluZXIoe1xuICBjcHU6IDI1NixcbiAgbWVtb3J5TWlCOiA1MTIsXG4gIHRyYWZmaWNQb3J0OiA4MCxcbiAgaW1hZ2U6IGVjcy5Db250YWluZXJJbWFnZS5mcm9tUmVnaXN0cnkoJ25hdGhhbnBlY2svbmFtZScpLFxuICBlbnZpcm9ubWVudDoge1xuICAgIFBPUlQ6ICc4MCcsXG4gIH0sXG59KSk7XG5cbmNvbnN0IHRvcGljU3Vic2NyaXB0aW9uMSA9IG5ldyBUb3BpY1N1YnNjcmlwdGlvbih7XG4gIHRvcGljOiB0b3BpYzEudG9waWMsXG4gIHRvcGljU3Vic2NyaXB0aW9uUXVldWU6IHtcbiAgICBxdWV1ZTogbmV3IHNxcy5RdWV1ZShzdGFjaywgJ3NpZ24tdXAtcXVldWUnKSxcbiAgICBzY2FsZU9uTGF0ZW5jeToge1xuICAgICAgYWNjZXB0YWJsZUxhdGVuY3k6IGNkay5EdXJhdGlvbi5taW51dGVzKDEwKSxcbiAgICAgIG1lc3NhZ2VQcm9jZXNzaW5nVGltZTogY2RrLkR1cmF0aW9uLnNlY29uZHMoMjApLFxuICAgIH0sXG4gIH0sXG59KTtcbmNvbnN0IHRvcGljU3Vic2NyaXB0aW9uMiA9IG5ldyBUb3BpY1N1YnNjcmlwdGlvbih7XG4gIHRvcGljOiB0b3BpYzIudG9waWMsXG59KTtcblxuc3ViU2VydmljZURlc2NyaXB0aW9uLmFkZChuZXcgUXVldWVFeHRlbnNpb24oe1xuICBzdWJzY3JpcHRpb25zOiBbdG9waWNTdWJzY3JpcHRpb24xLCB0b3BpY1N1YnNjcmlwdGlvbjJdLFxuICBzY2FsZU9uTGF0ZW5jeToge1xuICAgIGFjY2VwdGFibGVMYXRlbmN5OiBjZGsuRHVyYXRpb24ubWludXRlcyg1KSxcbiAgICBtZXNzYWdlUHJvY2Vzc2luZ1RpbWU6IGNkay5EdXJhdGlvbi5zZWNvbmRzKDIwKSxcbiAgfSxcbn0pKTtcblxubmV3IFNlcnZpY2Uoc3RhY2ssICdXb3JrZXInLCB7XG4gIGVudmlyb25tZW50OiBlbnZpcm9ubWVudCxcbiAgc2VydmljZURlc2NyaXB0aW9uOiBzdWJTZXJ2aWNlRGVzY3JpcHRpb24sXG4gIGF1dG9TY2FsZVRhc2tDb3VudDoge1xuICAgIG1heFRhc2tDb3VudDogMTAsXG4gIH0sXG59KTsiXX0=